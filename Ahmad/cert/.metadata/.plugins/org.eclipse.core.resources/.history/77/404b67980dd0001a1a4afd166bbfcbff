package lambdasPractice;

public class App {

	public static void main(String[] args) {
		
		Human tom = new Human();
		// tom.walk();
		walker(tom);
		
		Robot wally = new Robot();
		//wally.walk();
		walker(wally);
		
//		// anonymous class definition
//		walker(new Walkable() {
//			
//			@Override
//			public void walk() {
//				System.out.println("Custom object walking ...");
//				// behavior not tied to any class
//			}
//		});
		
		// lambda expression
		// walker(() -> System.out.println("Custom object walking ...."));
////		ALambdaInterface aBlockOfCode = () -> {
////			System.out.println("Custom obejct walking ....");
////		};
		
		Walkable aBlockOfCode = () -> {
			System.out.println("Custom object walking...");
			System.out.println("the object tripped...");
		};
		
		walker(aBlockOfCode);
		
		ALambdaInterface helloVar = () -> System.out.println("hello there");
		Calculate sumVar = (a, b) -> a+b;
		helloVar.someMethod();
		System.out.println(sumVar.compute(4, 6));
		
		////
		public int sum(int arg1, int arg2) {
			return arg1+arg2;
		}
		
		
		// public method
		public int nonZeroDivide(int arg1, int arg2) {
			if(arg1==0) {
				return 0;
			}
			return arg1/arg2;
		}
		
		// lambda expression
		Calculate nonZeroDivider = (a, b) -> {
			if(a == 0 ) {
				return 0;
			}
			return a/b;
		};
		
		System.out.println(nonZeroDivider.compute(10, 2));
		
	}
	
	
	
//	public void sayHello() {
//		System.out.println("hello there");
//	}
	
//	public static void walker(Human human) {
//		human.walk();
//	}
	
	public static void walker(Walkable walkableEntity) {
	walkableEntity.walk();
	}
}

interface Calculate{
	public int compute(int a, int b);
}
		
