package arrayBlockingQueue;

import java.util.concurrent.BlockingQueue;

public class Producer Implements Runnable {

	int questionNo;
	BlockingQueue<Integer> questionQueue;

	public Producer(BlockingQueue<Integer> questionQueue) {
		this.questionQueue = questionQueue;
	}

	@Override
	public void run() {
		questionNo++;
		try {
			questionQueue.put(questionNo);
		} catch (InterruptedException e) {

		}
	}

	private synchronized int getNextQuestion() {
		int nextQuestion = questionNo++;
		System.out.println("Got new Question: " + nextQuestion);
		return nextQuestion;
	}

}
//	
//		try {
//			synchronized(this) {
//				int nextQuestion = questionNo++;
//				System.out.println("Got new Question: " + nextQuestion);
//				questionQueue.put(nextQuestion);
//			}
//		} catch (InterruptedException e) {
//		System.out.println("Error: " + e);	
//		}
//	}
//	
//	
//	private synchronized int getNextQuestion() {
//		int nextQuestion = questionNo++;
//		System.out.println("Got new Question: " + nextQuestion);
//		return nextQuestion;
//	}
